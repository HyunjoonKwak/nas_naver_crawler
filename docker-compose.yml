services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:16-alpine
    container_name: naver-crawler-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=naver_crawler
      - POSTGRES_USER=crawler_user
      - POSTGRES_PASSWORD=crawler_pass_2025
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8

    volumes:
      - postgres_data:/var/lib/postgresql/data

    ports:
      - "5434:5432"  # 외부 포트 5434으로 변경 (이전 프로젝트 5433 충돌 방지)

    networks:
      - crawler-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawler_user -d naver_crawler"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Next.js 웹 애플리케이션
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev  # ⚠️ 개발 모드 유지 (별도 지시 전까지 변경 금지)
                                   # 정책: /docs/DEVELOPMENT_POLICY.md 참고
    container_name: naver-crawler-web
    restart: unless-stopped

    # 환경변수 파일 사용
    env_file:
      - config.env

    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://crawler_user:crawler_pass_2025@db:5432/naver_crawler
      - NODE_ENV=development

    # 볼륨 마운트 (Hot Reload를 위한 소스 코드 마운트)
    volumes:
      # === 데이터 저장 (NAS) ===
      - ./crawled_data:/app/crawled_data
      - ./logs:/app/logs

      # === 소스 코드 (NAS - Hot Reload용) ===
      - ./app:/app/app
      - ./components:/app/components
      - ./lib:/app/lib
      - ./logic:/app/logic
      - ./hooks:/app/hooks
      - ./prisma:/app/prisma
      - ./public:/app/public
      - ./scripts:/app/scripts
      - ./instrumentation.ts:/app/instrumentation.ts
      - ./next.config.js:/app/next.config.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./postcss.config.js:/app/postcss.config.js

      # === 캐시/빌드 결과 (컨테이너 내부 - 성능 최적화) ===
      - node_modules:/app/node_modules
      - nextjs_cache:/app/.next
      - prisma_cache:/app/node_modules/.prisma

    # 포트 설정 (웹 인터페이스)
    ports:
      - "3000:3000"

    # 네트워크 설정
    networks:
      - crawler-network

    # DB가 준비될 때까지 대기
    depends_on:
      db:
        condition: service_healthy

    # 리소스 제한 (NAS 호환)
    mem_limit: 2g
    memswap_limit: 2g

    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  crawler-network:
    driver: bridge

volumes:
  postgres_data:
  crawled_data:
  logs:
  node_modules:      # 성능 최적화: 컨테이너 내부 저장
  nextjs_cache:      # 성능 최적화: 빌드 캐시
  prisma_cache:      # 성능 최적화: Prisma Client 캐시
