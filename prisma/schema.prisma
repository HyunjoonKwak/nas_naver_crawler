// Prisma Schema for Naver Real Estate Crawler
// Database: PostgreSQL
// Version: 1.0.0

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 단지 정보 테이블
model Complex {
  id             String    @id @default(uuid())
  complexNo      String    @unique // 네이버 단지 번호
  complexName    String    // 단지명
  totalHousehold Int?      // 총 세대수
  totalDong      Int?      // 총 동수
  latitude       Float?    // 위도
  longitude      Float?    // 경도
  address        String?   // 주소
  roadAddress    String?   // 도로명 주소
  jibunAddress   String?   // 지번 주소
  beopjungdong   String?   // 법정동
  haengjeongdong String?   // 행정동
  pyeongs        Json?     // 평형별 타입 정보
  userId         String    // 생성한 사용자 ID
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // 관계
  articles      Article[]
  favorites     Favorite[]
  complexGroups ComplexGroup[]

  @@index([complexNo])
  @@index([complexName])
  @@index([beopjungdong])
  @@index([haengjeongdong])
  @@index([userId])
  @@map("complexes")
}

// 매물 정보 테이블
model Article {
  id                  String   @id @default(uuid())
  articleNo           String   @unique // 매물 번호
  complexId           String   // 단지 FK
  complex             Complex  @relation(fields: [complexId], references: [id], onDelete: Cascade)

  // 매물 기본 정보
  realEstateTypeName  String   // 매물 유형 (아파트, 오피스텔 등)
  tradeTypeName       String   // 거래 유형 (매매, 전세, 월세)
  dealOrWarrantPrc    String   // 가격 (매매가 또는 보증금)
  rentPrc             String?  // 월세

  // 면적 정보
  area1               Float    // 전용면적 (m²)
  area2               Float?   // 공급면적 (m²)

  // 상세 정보
  floorInfo           String?  // 층 정보 (예: "5/15")
  direction           String?  // 방향
  articleConfirmYmd   String?  // 매물 확인 일자
  buildingName        String?  // 동
  sameAddrCnt         Int?     // 중복 건수
  realtorName         String?  // 중개소 이름
  articleFeatureDesc  String?  // 매물 특징

  // 추가 정보 (JSON)
  tagList             Json?    // 태그 리스트

  // 타임스탬프
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([complexId])
  @@index([tradeTypeName])
  @@index([dealOrWarrantPrc])
  @@index([articleConfirmYmd])
  @@map("articles")
}

// 크롤링 히스토리 테이블
model CrawlHistory {
  id                String   @id @default(uuid())
  complexNos        String[] // 크롤링한 단지 번호들
  totalComplexes    Int      // 크롤링한 총 단지 수
  successCount      Int      // 성공한 단지 수
  errorCount        Int      // 실패한 단지 수
  totalArticles     Int      // 수집한 총 매물 수
  duration          Int      // 소요 시간 (ms)
  status            String   // crawling, saving, success, partial, failed
  errorMessage      String?  // 에러 메시지
  userId            String   // 실행한 사용자 ID
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Progress tracking fields
  currentStep       String?  @map("current_step") // current operation step
  processedArticles Int      @default(0) @map("processed_articles") // 처리된 매물 수
  processedComplexes Int     @default(0) @map("processed_complexes") // 처리된 단지 수

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([status])
  @@index([userId])
  @@map("crawl_history")
}

// 즐겨찾기 테이블
model Favorite {
  id        String   @id @default(uuid())
  complexId String   // 단지 FK
  complex   Complex  @relation(fields: [complexId], references: [id], onDelete: Cascade)
  userId    String   // 사용자 ID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([complexId, userId])
  @@index([userId])
  @@map("favorites")
}

// 알림 설정 테이블
model Alert {
  id            String   @id @default(uuid())
  name          String   // 알림 이름
  complexIds    String[] // 관심 단지들
  tradeTypes    String[] // 거래 유형 (매매, 전세, 월세)
  userId        String   // 사용자 ID
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 가격 조건
  minPrice      Int?     // 최소 가격 (만원)
  maxPrice      Int?     // 최대 가격 (만원)

  // 면적 조건
  minArea       Float?   // 최소 면적 (m²)
  maxArea       Float?   // 최대 면적 (m²)

  // 알림 설정
  isActive      Boolean  @default(true)
  notifyEmail   Boolean  @default(false)
  notifyBrowser Boolean  @default(true)
  notifyWebhook Boolean  @default(false)
  webhookUrl    String?  // 웹훅 URL (Slack, Discord 등)

  // 타임스탬프
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  logs NotificationLog[]

  @@index([isActive])
  @@index([userId])
  @@map("alerts")
}

// 알림 로그 테이블
model NotificationLog {
  id        String   @id @default(uuid())
  alertId   String   // 알림 FK
  alert     Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)
  type      String   // browser, email, webhook
  status    String   // sent, failed
  message   String   // 알림 메시지
  articleId String?  // 관련 매물 ID (선택)
  sentAt    DateTime @default(now())

  @@index([alertId])
  @@index([sentAt])
  @@map("notification_logs")
}

// 스케줄 테이블
model Schedule {
  id         String    @id @default(uuid())
  name       String    // 스케줄 이름
  complexNos String[]  // 크롤링할 단지들
  cronExpr   String    // Cron 표현식
  isActive   Boolean   @default(true)
  lastRun    DateTime? // 마지막 실행 시간
  nextRun    DateTime? // 다음 실행 시간
  userId     String    // 사용자 ID
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // 관계
  logs ScheduleLog[]

  @@index([isActive])
  @@index([nextRun])
  @@index([userId])
  @@map("schedules")
}

// 스케줄 실행 로그 테이블
model ScheduleLog {
  id            String   @id @default(uuid())
  scheduleId    String   // 스케줄 FK
  schedule      Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  status        String   // success, failed
  duration      Int      // 소요 시간 (ms)
  articlesCount Int?     // 수집한 매물 수
  errorMessage  String?  // 에러 메시지
  executedAt    DateTime @default(now())

  @@index([scheduleId])
  @@index([executedAt])
  @@map("schedule_logs")
}

// 단지 그룹 테이블
model Group {
  id          String   @id @default(uuid())
  name        String   // 그룹 이름 (예: "강남구", "관심지역", "투자후보")
  description String?  // 그룹 설명
  color       String?  // 그룹 색상 (UI 표시용, 예: "#3b82f6")
  type        String   @default("custom") // custom(사용자 정의), auto(자동 생성)
  autoRule    String?  // 자동 그룹 규칙 (예: "beopjungdong:강남구")
  order       Int      @default(0) // 정렬 순서
  userId      String   // 사용자 ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  complexGroups ComplexGroup[]

  @@index([type])
  @@index([order])
  @@index([userId])
  @@map("groups")
}

// 단지-그룹 관계 테이블 (다대다)
model ComplexGroup {
  id        String   @id @default(uuid())
  complexId String   // 단지 FK
  groupId   String   // 그룹 FK
  complex   Complex  @relation(fields: [complexId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([complexId, groupId]) // 하나의 단지는 같은 그룹에 한번만
  @@index([complexId])
  @@index([groupId])
  @@map("complex_groups")
}

// 유용한 링크 테이블
model UsefulLink {
  id          String   @id @default(uuid())
  title       String   // 링크 제목
  url         String   // URL
  description String?  // 설명
  category    String   // 카테고리 (geocoding, transaction, reference, etc.)
  icon        String?  // 아이콘 (이모지 또는 URL)
  order       Int      @default(0) // 정렬 순서
  isActive    Boolean  @default(true) // 활성화 여부
  userId      String   // 사용자 ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([order])
  @@index([userId])
  @@map("useful_links")
}

// 사용자 테이블
model User {
  id            String    @id @default(uuid())
  email         String    @unique // 이메일 (로그인 ID)
  password      String    // 해시된 비밀번호
  name          String    // 사용자 이름
  role          String    @default("GUEST") // ADMIN, FAMILY, GUEST
  isApproved    Boolean   @default(false) // 관리자 승인 여부
  isActive      Boolean   @default(true) // 활성화 여부
  lastLoginAt   DateTime? // 마지막 로그인 시간
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계
  complexes      Complex[]
  crawlHistories CrawlHistory[]
  favorites      Favorite[]
  alerts         Alert[]
  schedules      Schedule[]
  groups         Group[]
  usefulLinks    UsefulLink[]

  // 커뮤니티 관계
  posts          Post[]
  comments       Comment[]
  postLikes      PostLike[]
  postReports    PostReport[]
  commentReports CommentReport[]
  notifications  Notification[]

  @@index([email])
  @@index([role])
  @@index([isApproved])
  @@map("users")
}

// ============================================
// 커뮤니티 모델
// ============================================

// 게시글
model Post {
  id            String       @id @default(cuid())
  title         String
  content       String       @db.Text
  category      PostCategory

  // 작성자
  authorId      String
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // 통계
  views         Int          @default(0)
  likesCount    Int          @default(0)

  // Q&A 전용
  isResolved    Boolean      @default(false)
  acceptedCommentId String?

  // 관계
  likes         PostLike[]
  comments      Comment[]
  reports       PostReport[]
  images        PostImage[]

  // 상태
  isPinned      Boolean      @default(false)  // 공지 고정
  isDeleted     Boolean      @default(false)  // 소프트 삭제

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([category])
  @@index([authorId])
  @@index([createdAt])
  @@index([isPinned])
  @@index([likesCount])
  @@map("posts")
}

// 게시글 카테고리
enum PostCategory {
  FREE      // 자유게시판
  QNA       // Q&A
  NOTICE    // 공지사항
}

// 게시글 이미지
model PostImage {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  url       String
  filename  String
  size      Int
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@index([postId])
  @@map("post_images")
}

// 댓글
model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text

  // 게시글
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  // 작성자
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // 대댓글 (자기 참조)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  // 채택 여부 (Q&A용)
  isAccepted Boolean  @default(false)

  // 관계
  reports   CommentReport[]

  // 상태
  isDeleted Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

// 게시글 좋아요
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("post_likes")
}

// 게시글 신고
model PostReport {
  id          String       @id @default(cuid())
  postId      String
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporterId  String
  reporter    User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reason      ReportReason
  description String?      @db.Text
  status      ReportStatus @default(PENDING)
  adminNote   String?      @db.Text
  resolvedAt  DateTime?
  createdAt   DateTime     @default(now())

  @@index([postId])
  @@index([reporterId])
  @@index([status])
  @@map("post_reports")
}

// 댓글 신고
model CommentReport {
  id          String       @id @default(cuid())
  commentId   String
  comment     Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reporterId  String
  reporter    User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reason      ReportReason
  description String?      @db.Text
  status      ReportStatus @default(PENDING)
  adminNote   String?      @db.Text
  resolvedAt  DateTime?
  createdAt   DateTime     @default(now())

  @@index([commentId])
  @@index([reporterId])
  @@index([status])
  @@map("comment_reports")
}

// 신고 사유
enum ReportReason {
  SPAM          // 스팸
  ABUSE         // 욕설/비방
  INAPPROPRIATE // 부적절한 내용
  COPYRIGHT     // 저작권 침해
  FRAUD         // 사기/허위정보
  ETC           // 기타
}

// 신고 상태
enum ReportStatus {
  PENDING    // 대기중
  IN_REVIEW  // 검토중
  RESOLVED   // 처리완료
  REJECTED   // 반려
}

// 알림
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  postId    String?
  commentId String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// 알림 타입
enum NotificationType {
  COMMENT       // 댓글
  ACCEPTED      // 채택
  NOTICE        // 공지사항
}
