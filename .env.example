# ===========================================
# DATABASE CONFIGURATION
# ===========================================
# ⚠️ IMPORTANT: 프로덕션 환경에서는 반드시 강력한 비밀번호로 변경하세요!

# Docker 환경 (docker-compose 내부) - NAS 환경용
DATABASE_URL="postgresql://crawler_user:CHANGE_THIS_PASSWORD_IN_PRODUCTION@db:5432/naver_crawler?schema=public"

# 로컬 개발 환경 (Docker 외부에서 테스트 시)
# DATABASE_URL="postgresql://crawler_user:CHANGE_THIS_PASSWORD_IN_PRODUCTION@localhost:5432/naver_crawler?schema=public"

# Note:
# - NAS (Docker 내부): db (서비스명) 사용 ✅
# - 로컬 개발 (Docker 외부): localhost 사용
# - 프로덕션: 실제 DB 호스트 사용
# - 비밀번호 생성 예시: openssl rand -base64 32

# ===========================================
# NEXTAUTH CONFIGURATION
# ===========================================
# ⚠️ CRITICAL: 아래 값을 반드시 변경하세요! 보안에 매우 중요합니다.

# NextAuth Secret Key (최소 32자 이상의 강력한 랜덤 문자열)
# 생성 명령: openssl rand -base64 32
# Linux/Mac: openssl rand -base64 32
# Windows (PowerShell): [Convert]::ToBase64String([System.Security.Cryptography.RandomNumberGenerator]::GetBytes(32))
NEXTAUTH_SECRET="REPLACE_WITH_STRONG_RANDOM_STRING_AT_LEAST_32_CHARACTERS_OR_MORE"

# NextAuth URL (배포 환경에 맞게 변경)
# 로컬: http://localhost:3000
# 프로덕션: https://yourdomain.com
NEXTAUTH_URL="http://localhost:3000"

# ===========================================
# OPTIONAL: DISCORD WEBHOOK (알림용)
# ===========================================
# Discord 웹훅 URL (선택사항)
# Discord 서버 설정 > 연동 > 웹훅에서 생성 가능
# DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN"

# ===========================================
# NODE ENVIRONMENT
# ===========================================
# development, production, test
NODE_ENV="development"

# ===========================================
# INTERNAL API SECRET
# ===========================================
# 스케줄러 등 내부 API 호출 시 사용하는 비밀키
# 생성 명령: openssl rand -base64 32
# ⚠️ CRITICAL: 외부에 노출되지 않도록 주의!
INTERNAL_API_SECRET="REPLACE_WITH_STRONG_RANDOM_STRING_FOR_INTERNAL_API_CALLS"
