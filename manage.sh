#!/bin/bash
# ÏõπÏÑúÎ≤Ñ Í¥ÄÎ¶¨ Ïä§ÌÅ¨Î¶ΩÌä∏ v2.0

set -e

# ÏÉâÏÉÅ Ï†ïÏùò
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_blue() {
    echo -e "${BLUE}$1${NC}"
}

log_cyan() {
    echo -e "${CYAN}$1${NC}"
}

# ÌôòÍ≤Ω Í∞êÏßÄ (ÌîÑÎ°úÎçïÏÖò or ÌÖåÏä§Ìä∏)
detect_environment() {
    # ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú Î™ÖÏãúÏ†Å ÏßÄÏ†ï Í∞ÄÎä•
    if [ ! -z "$DEPLOY_ENV" ]; then
        echo "$DEPLOY_ENV"
        return
    fi

    # Ïã§Ìñâ Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑàÎ°ú ÌåêÎã®
    if docker ps --format "{{.Names}}" | grep -q "test"; then
        echo "test"
    # test yml ÌååÏùºÏù¥ ÏûàÍ≥† test Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä ÏûàÏúºÎ©¥ (Ï§ëÏßÄ ÏÉÅÌÉú Ìè¨Ìï®)
    elif [ -f "docker-compose.test.yml" ] && docker ps -a --format "{{.Names}}" | grep -q "test"; then
        echo "test"
    else
        echo "prod"
    fi
}

# ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑà Ïù¥Î¶Ñ ÌôïÏù∏
get_running_container() {
    ENV=$(detect_environment)

    if [[ "$ENV" == "test" ]]; then
        if docker ps --format "{{.Names}}" | grep -q "naver-crawler-web-test"; then
            echo "naver-crawler-web-test"
        else
            echo ""
        fi
    else
        if docker ps --format "{{.Names}}" | grep -q "^naver-crawler-web$"; then
            echo "naver-crawler-web"
        elif docker ps --format "{{.Names}}" | grep -q "naver-crawler-web-dev"; then
            echo "naver-crawler-web-dev"
        else
            echo ""
        fi
    fi
}

# Docker Compose ÌååÏùº ÏÑ†ÌÉù
get_compose_file() {
    ENV=$(detect_environment)

    if [[ "$ENV" == "test" ]]; then
        echo "docker-compose.test.yml"
    else
        echo "docker-compose.yml"
    fi
}

# ÌòÑÏû¨ Î™®Îìú ÌôïÏù∏
get_current_mode() {
    COMPOSE_FILE=$(get_compose_file)
    DOCKERFILE=$(grep "dockerfile:" "$COMPOSE_FILE" 2>/dev/null | awk '{print $2}' | head -1)
    if [[ "$DOCKERFILE" == "Dockerfile.dev" ]]; then
        echo "dev"
    else
        echo "prod"
    fi
}

show_menu() {
    clear
    echo -e "${MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${MAGENTA}  ÎÑ§Ïù¥Î≤Ñ Î∂ÄÎèôÏÇ∞ ÌÅ¨Î°§Îü¨ Í¥ÄÎ¶¨ Î©îÎâ¥ v2.1${NC}"
    echo -e "${MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""

    # ÌòÑÏû¨ ÌôòÍ≤Ω Î∞è ÏÉÅÌÉú ÌëúÏãú
    ENV=$(detect_environment)
    CONTAINER=$(get_running_container)
    CURRENT_MODE=$(get_current_mode)
    COMPOSE_FILE=$(get_compose_file)

    # ÌôòÍ≤Ω ÌëúÏãú
    if [[ "$ENV" == "test" ]]; then
        echo -e "${BLUE}üß™ ÌôòÍ≤Ω: ÌÖåÏä§Ìä∏ (perf_improve)${NC}"
        echo -e "  Ìè¨Ìä∏: 3001 | DB: 5435 | Redis: 6380"
    else
        echo -e "${GREEN}üè≠ ÌôòÍ≤Ω: ÌîÑÎ°úÎçïÏÖò (main)${NC}"
        echo -e "  Ìè¨Ìä∏: 3000 | DB: 5434 | Redis: 6379"
    fi
    echo -e "  Compose: ${CYAN}$COMPOSE_FILE${NC}"
    echo ""

    if [ -n "$CONTAINER" ]; then
        echo -e "${GREEN}‚óè ÏÉÅÌÉú: Ïã§Ìñâ Ï§ë${NC}"
        echo -e "  Ïª®ÌÖåÏù¥ÎÑà: ${CYAN}$CONTAINER${NC}"
        if [[ "$CURRENT_MODE" == "dev" ]]; then
            echo -e "  Î™®Îìú: ${BLUE}üîß Í∞úÎ∞ú Î™®Îìú (Hot Reload)${NC}"
        else
            echo -e "  Î™®Îìú: ${GREEN}üöÄ ÌîÑÎ°úÎçïÏÖò Î™®Îìú${NC}"
        fi
    else
        echo -e "${YELLOW}‚óã ÏÉÅÌÉú: Ï§ëÏßÄÎê®${NC}"
        if [[ "$CURRENT_MODE" == "dev" ]]; then
            echo -e "  ÏÑ§Ï†ï: ${BLUE}üîß Í∞úÎ∞ú Î™®Îìú${NC}"
        else
            echo -e "  ÏÑ§Ï†ï: ${GREEN}üöÄ ÌîÑÎ°úÎçïÏÖò Î™®Îìú${NC}"
        fi
    fi

    echo ""
    echo -e "${MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""

    echo -e "${CYAN}=== Í∏∞Î≥∏ Ï†úÏñ¥ ===${NC}"
    echo "  1) üöÄ ÏãúÏûë"
    echo "  2) üõë Ï¢ÖÎ£å"
    echo "  3) üîÑ Ïû¨ÏãúÏûë"
    echo "  4) üìä ÏÉÅÌÉú ÌôïÏù∏ (ÏÉÅÏÑ∏)"
    echo "  5) üìù Î°úÍ∑∏ Î≥¥Í∏∞ (Ïã§ÏãúÍ∞Ñ)"
    echo "  6) üìú Î°úÍ∑∏ Î≥¥Í∏∞ (ÏµúÍ∑º 100Ï§Ñ)"
    echo ""

    echo -e "${CYAN}=== Î™®Îìú Í¥ÄÎ¶¨ ===${NC}"
    echo "  7) üîÄ Î™®Îìú Ï†ÑÌôò (Í∞úÎ∞ú ‚Üî ÌîÑÎ°úÎçïÏÖò)"
    echo "  8) üåç ÌôòÍ≤Ω Ï†ÑÌôò (ÌîÑÎ°úÎçïÏÖò ‚Üî ÌÖåÏä§Ìä∏)"
    echo "  9) ‚ö° ÌîÑÎ°úÎçïÏÖò ÏÜçÎèÑ ÌÖåÏä§Ìä∏"
    echo ""

    echo -e "${CYAN}=== ÎπåÎìú & Í¥ÄÎ¶¨ ===${NC}"
    echo " 10) üîß ÎπåÎìú (ÌîÑÎ°úÎçïÏÖò)"
    echo " 11) üóëÔ∏è  Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨"
    echo " 12) üîç Docker Ï†ïÎ≥¥"
    echo " 13) üßπ Ï∫êÏãú Ï†ïÎ¶¨ (.next ÏÇ≠Ï†ú)"
    echo ""

    echo -e "${CYAN}=== Í∏∞ÌÉÄ ===${NC}"
    echo "  0) üö™ Ï¢ÖÎ£å"
    echo ""
    echo -e "${MAGENTA}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

start_server() {
    log_info "ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë..."
    echo ""

    ENV=$(detect_environment)
    COMPOSE_FILE=$(get_compose_file)
    CURRENT_MODE=$(get_current_mode)

    if [[ "$ENV" == "test" ]]; then
        log_blue "üß™ ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏúºÎ°ú ÏãúÏûëÌï©ÎãàÎã§."
        echo "  - Ìè¨Ìä∏: 3001"
        echo "  - DB: 5435, Redis: 6380"
    else
        if [[ "$CURRENT_MODE" == "dev" ]]; then
            log_blue "üîß Í∞úÎ∞ú Î™®ÎìúÎ°ú ÏãúÏûëÌï©ÎãàÎã§."
            echo "  - Hot Reload ÌôúÏÑ±Ìôî"
            echo "  - ÎπåÎìú Î∂àÌïÑÏöî"
            echo "  - Ï≤´ Ïã§Ìñâ Ïãú npm install (5-10Î∂Ñ)"
        else
            log_blue "üöÄ ÌîÑÎ°úÎçïÏÖò Î™®ÎìúÎ°ú ÏãúÏûëÌï©ÎãàÎã§."
            echo "  - ÏµúÏ†ÅÌôîÎêú ÏÑ±Îä•"
            echo "  - ÏÇ¨Ï†Ñ ÎπåÎìú ÌïÑÏöî"
        fi
    fi

    echo ""
    docker-compose -f "$COMPOSE_FILE" up -d

    if [ $? -eq 0 ]; then
        log_info "‚úÖ ÏÑúÎ≤Ñ ÏãúÏûë ÏôÑÎ£å!"
        echo ""
        if [[ "$ENV" == "test" ]]; then
            log_cyan "üåê Ïõπ UI: http://localhost:3001"
        else
            log_cyan "üåê Ïõπ UI: http://localhost:3000"
        fi
        if [[ "$CURRENT_MODE" == "dev" ]]; then
            echo ""
            log_blue "üí° Hot Reload: ÏΩîÎìú ÏàòÏ†ï Ïãú ÏûêÎèô Î∞òÏòÅ (3-5Ï¥à)"
        fi
    else
        log_error "‚ùå ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå®!"
        return 1
    fi
}

stop_server() {
    log_info "ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë..."

    COMPOSE_FILE=$(get_compose_file)
    docker-compose -f "$COMPOSE_FILE" down

    if [ $? -eq 0 ]; then
        log_info "‚úÖ ÏÑúÎ≤Ñ Ï¢ÖÎ£å ÏôÑÎ£å!"
    else
        log_error "‚ùå ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ïã§Ìå®!"
        return 1
    fi
}

restart_server() {
    log_info "ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Ï§ë..."

    COMPOSE_FILE=$(get_compose_file)
    docker-compose -f "$COMPOSE_FILE" restart

    if [ $? -eq 0 ]; then
        log_info "‚úÖ ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë ÏôÑÎ£å!"
    else
        log_error "‚ùå ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë Ïã§Ìå®!"
        return 1
    fi
}

check_status() {
    log_info "ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
    echo ""

    CONTAINER=$(get_running_container)
    CURRENT_MODE=$(get_current_mode)

    if [ -n "$CONTAINER" ]; then
        echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${GREEN}  Ïã§Ìñâ Ï§ë${NC}"
        echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo ""

        if [[ "$CURRENT_MODE" == "dev" ]]; then
            echo -e "Î™®Îìú: ${BLUE}üîß Í∞úÎ∞ú Î™®Îìú (Hot Reload)${NC}"
            echo "  - Dockerfile: Dockerfile.dev"
            echo "  - Î™ÖÎ†πÏñ¥: npm run dev"
            echo "  - Hot Reload: ÌôúÏÑ±Ìôî"
        else
            echo -e "Î™®Îìú: ${GREEN}üöÄ ÌîÑÎ°úÎçïÏÖò Î™®Îìú${NC}"
            echo "  - Dockerfile: Dockerfile"
            echo "  - Î™ÖÎ†πÏñ¥: npm start"
            echo "  - ÏµúÏ†ÅÌôî: ÌôúÏÑ±Ìôî"
        fi

        echo ""
        echo -e "${CYAN}=== Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ===${NC}"
        docker-compose ps

        echo ""
        echo -e "${CYAN}=== Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ ===${NC}"
        docker stats --no-stream $CONTAINER naver-crawler-db 2>/dev/null || true

        echo ""
        echo -e "${CYAN}=== Ìó¨Ïä§Ï≤¥ÌÅ¨ ===${NC}"
        HEALTH=$(docker inspect $CONTAINER --format='{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
        if [[ "$HEALTH" == "healthy" ]]; then
            echo -e "ÏÉÅÌÉú: ${GREEN}‚úÖ Healthy${NC}"
        elif [[ "$HEALTH" == "unhealthy" ]]; then
            echo -e "ÏÉÅÌÉú: ${RED}‚ùå Unhealthy${NC}"
        else
            echo -e "ÏÉÅÌÉú: ${YELLOW}‚è≥ Starting...${NC}"
        fi
    else
        echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${YELLOW}  Ï§ëÏßÄÎê®${NC}"
        echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo ""
        if [[ "$CURRENT_MODE" == "dev" ]]; then
            echo -e "ÏÑ§Ï†ï: ${BLUE}üîß Í∞úÎ∞ú Î™®Îìú${NC}"
        else
            echo -e "ÏÑ§Ï†ï: ${GREEN}üöÄ ÌîÑÎ°úÎçïÏÖò Î™®Îìú${NC}"
        fi
        echo ""
        log_warn "ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù¥ ÏïÑÎãôÎãàÎã§."
        echo ""
        log_cyan "üí° '1) ÏãúÏûë'ÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî."
    fi

    echo ""
    echo -e "${CYAN}=== ÌÅ¨Î°§ÎßÅ Îç∞Ïù¥ÌÑ∞ ===${NC}"
    FILE_COUNT=$(ls -1 crawled_data/*.json 2>/dev/null | wc -l | tr -d ' ')
    echo "ÌÅ¨Î°§ÎßÅÎêú ÌååÏùº: ${FILE_COUNT}Í∞ú"

    if [ $FILE_COUNT -gt 0 ]; then
        echo ""
        echo "ÏµúÏã† 3Í∞ú ÌååÏùº:"
        ls -lht crawled_data/*.json 2>/dev/null | head -3 | awk '{print "  " $9 " (" $5 ")"}'
    fi

    echo ""
    echo -e "${CYAN}=== Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ===${NC}"
    if docker ps --format "{{.Names}}" | grep -q "naver-crawler-db"; then
        echo -e "PostgreSQL: ${GREEN}‚úÖ Ïã§Ìñâ Ï§ë${NC}"
    else
        echo -e "PostgreSQL: ${RED}‚ùå Ï§ëÏßÄÎê®${NC}"
    fi

    echo ""
}

view_logs() {
    log_info "Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏ ÌôïÏù∏ Ï§ë..."
    echo ""

    CONTAINER=$(get_running_container)

    if [ -z "$CONTAINER" ]; then
        log_error "Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎ≤ÑÍ∞Ä ÏóÜÏäµÎãàÎã§."
        return 1
    fi

    ENV=$(detect_environment)
    CURRENT_MODE=$(get_current_mode)

    if [[ "$ENV" == "test" ]]; then
        log_blue "üß™ ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω Î°úÍ∑∏ (Ctrl+CÎ°ú Ï¢ÖÎ£å)"
    elif [[ "$CURRENT_MODE" == "dev" ]]; then
        log_blue "üîß Í∞úÎ∞ú Î™®Îìú Î°úÍ∑∏ (Ctrl+CÎ°ú Ï¢ÖÎ£å)"
        echo "  - Hot Reload ÌôúÏÑ±Ìôî"
        echo "  - Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏ Ïä§Ìä∏Î¶¨Î∞ç"
    else
        log_blue "üöÄ ÌîÑÎ°úÎçïÏÖò Î™®Îìú Î°úÍ∑∏ (Ctrl+CÎ°ú Ï¢ÖÎ£å)"
        echo "  - ÏµúÏ†ÅÌôîÎêú ÎπåÎìú"
    fi

    echo ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    sleep 2

    # Ïã§Ï†ú Ïª®ÌÖåÏù¥ÎÑà Ïù¥Î¶Ñ ÏÇ¨Ïö©
    docker logs $CONTAINER -f --tail=100
}

view_logs_static() {
    log_info "Î°úÍ∑∏ ÌôïÏù∏ Ï§ë (ÏµúÍ∑º 100Ï§Ñ)..."
    echo ""

    CONTAINER=$(get_running_container)

    if [ -z "$CONTAINER" ]; then
        log_error "Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎ≤ÑÍ∞Ä ÏóÜÏäµÎãàÎã§."
        return 1
    fi

    ENV=$(detect_environment)

    if [[ "$ENV" == "test" ]]; then
        log_blue "üß™ ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω Î°úÍ∑∏"
    else
        log_blue "üè≠ ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω Î°úÍ∑∏"
    fi

    echo ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""

    docker logs $CONTAINER --tail=100

    echo ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

clean_cache() {
    log_info "Next.js Ï∫êÏãú Ï†ïÎ¶¨ Ï§ë..."
    echo ""

    CONTAINER=$(get_running_container)

    if [ -z "$CONTAINER" ]; then
        log_error "Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎ≤ÑÍ∞Ä ÏóÜÏäµÎãàÎã§."
        log_warn "ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïú ÌõÑ Ï∫êÏãúÎ•º Ï†ïÎ¶¨ÌïòÏÑ∏Ïöî."
        return 1
    fi

    log_warn "‚ö†Ô∏è  Next.js ÎπåÎìú Ï∫êÏãú(.next)Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§."
    echo ""
    read -p "Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm

    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        log_info "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
        return 0
    fi

    docker exec $CONTAINER rm -rf .next

    if [ $? -eq 0 ]; then
        log_info "‚úÖ Ï∫êÏãú ÏÇ≠Ï†ú ÏôÑÎ£å!"
        echo ""
        log_blue "üí° ÏÑúÎ≤ÑÎ•º Ïû¨ÏãúÏûëÌïòÎ©¥ Next.jsÍ∞Ä Îã§Ïãú ÎπåÎìúÎê©ÎãàÎã§."
        echo ""
        read -p "ÏßÄÍ∏à Ïû¨ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " restart_confirm

        if [[ "$restart_confirm" =~ ^[Yy]$ ]]; then
            restart_server
        fi
    else
        log_error "‚ùå Ï∫êÏãú ÏÇ≠Ï†ú Ïã§Ìå®!"
        return 1
    fi
}

switch_mode() {
    ./scripts/switch-mode.sh
}

switch_environment() {
    log_info "[INFO] ÌôòÍ≤Ω Ï†ÑÌôò"
    echo ""

    ENV=$(detect_environment)

    if [[ "$ENV" == "test" ]]; then
        log_blue "ÌòÑÏû¨ ÌôòÍ≤Ω: üß™ ÌÖåÏä§Ìä∏ (Ìè¨Ìä∏ 3001)"
        echo ""
        echo "ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω (Ìè¨Ìä∏ 3000)ÏúºÎ°ú Ï†ÑÌôòÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
        read -p "(y/N): " confirm

        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_info "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
            return 0
        fi

        log_info "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω Ï§ëÏßÄ Ï§ë..."
        docker-compose -f docker-compose.test.yml down

        log_info "ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω ÏãúÏûë Ï§ë..."
        export DEPLOY_ENV=prod
        start_server
    else
        log_blue "ÌòÑÏû¨ ÌôòÍ≤Ω: üè≠ ÌîÑÎ°úÎçïÏÖò (Ìè¨Ìä∏ 3000)"
        echo ""
        echo "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω (Ìè¨Ìä∏ 3001)ÏúºÎ°ú Ï†ÑÌôòÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
        echo ""
        log_warn "‚ö†Ô∏è  ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÎê©ÎãàÎã§ (ÎèôÏãú Ïã§Ìñâ Í∞ÄÎä•)"
        read -p "(y/N): " confirm

        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_info "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
            return 0
        fi

        log_info "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏãúÏûë Ï§ë..."
        export DEPLOY_ENV=test
        docker-compose -f docker-compose.test.yml up -d

        if [ $? -eq 0 ]; then
            log_info "‚úÖ ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏãúÏûë ÏôÑÎ£å!"
            echo ""
            log_cyan "üåê ÌÖåÏä§Ìä∏ UI: http://localhost:3001"
            log_cyan "üåê ÌîÑÎ°úÎçïÏÖò UI: http://localhost:3000"
            echo ""
            log_blue "üí° Í¥ÄÎ¶¨ Î©îÎâ¥Î•º Ïû¨ÏãúÏûëÌïòÏó¨ ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏùÑ Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî:"
            echo "   export DEPLOY_ENV=test && ./manage.sh"
        else
            log_error "‚ùå ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏãúÏûë Ïã§Ìå®!"
            return 1
        fi
    fi
}

test_production() {
    echo ""
    log_warn "ÌîÑÎ°úÎçïÏÖò Î™®Îìú ÏÜçÎèÑ ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§."
    echo ""
    echo -e "${YELLOW}‚è±Ô∏è  ÏòàÏÉÅ ÏÜåÏöî ÏãúÍ∞Ñ: 20-40Î∂Ñ${NC}"
    echo "  - ÎπåÎìú: 15-30Î∂Ñ"
    echo "  - ÌÖåÏä§Ìä∏: 5-10Î∂Ñ"
    echo ""
    read -p "Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm

    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        log_info "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
        return 0
    fi

    ./scripts/test-production.sh
}

build_image() {
    log_info "ÌîÑÎ°úÎçïÏÖò Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
    echo ""
    log_warn "‚è±Ô∏è  NASÏóêÏÑú 15-30Î∂Ñ ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§."
    echo ""

    docker-compose build --no-cache web

    if [ $? -eq 0 ]; then
        log_info "‚úÖ ÎπåÎìú ÏôÑÎ£å!"
    else
        log_error "‚ùå ÎπåÎìú Ïã§Ìå®!"
        return 1
    fi
}

clean_data() {
    echo ""
    log_warn "‚ö†Ô∏è  Ï£ºÏùò: Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÎ¶¨Ìï©ÎãàÎã§!"
    echo ""
    echo "Ï†ïÎ¶¨ ÏòµÏÖò:"
    echo "  1) ÌÅ¨Î°§ÎßÅ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ≠Ï†ú (crawled_data/*.json)"
    echo "  2) Î°úÍ∑∏Îßå ÏÇ≠Ï†ú (logs/)"
    echo "  3) Î™®Îëê ÏÇ≠Ï†ú"
    echo "  4) favorites.json Î∞±ÏóÖ ÌõÑ ÏÇ≠Ï†ú"
    echo "  0) Ï∑®ÏÜå"
    echo ""

    read -p "ÏÑ†ÌÉù (0-4): " clean_choice

    case $clean_choice in
        1)
            read -p "ÌÅ¨Î°§ÎßÅ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                rm -rf crawled_data/*.json crawled_data/*.csv
                log_info "‚úÖ ÌÅ¨Î°§ÎßÅ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å"
            fi
            ;;
        2)
            read -p "Î°úÍ∑∏ ÌååÏùºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                rm -rf logs/*
                log_info "‚úÖ Î°úÍ∑∏ ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å"
            fi
            ;;
        3)
            read -p "Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                rm -rf crawled_data/*.json crawled_data/*.csv logs/*
                log_info "‚úÖ Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å"
            fi
            ;;
        4)
            if [ -f "crawled_data/favorites.json" ]; then
                cp crawled_data/favorites.json crawled_data/favorites.json.backup
                log_info "‚úÖ favorites.json Î∞±ÏóÖ ÏôÑÎ£å"
                read -p "Î∞±ÏóÖ ÌõÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): " confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    rm -f crawled_data/favorites.json
                    log_info "‚úÖ favorites.json ÏÇ≠Ï†ú ÏôÑÎ£å"
                    log_cyan "Î≥µÏõê: cp crawled_data/favorites.json.backup crawled_data/favorites.json"
                fi
            else
                log_warn "favorites.json ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§."
            fi
            ;;
        0)
            log_info "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
            ;;
        *)
            log_error "ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§."
            ;;
    esac
}

show_docker_info() {
    log_info "Docker Ï†ïÎ≥¥ ÌôïÏù∏ Ï§ë..."
    echo ""

    echo -e "${CYAN}=== Docker Î≤ÑÏ†Ñ ===${NC}"
    docker --version
    docker-compose --version

    echo ""
    echo -e "${CYAN}=== ÎÑ§Ìä∏ÏõåÌÅ¨ ===${NC}"
    docker network ls | grep crawler || echo "  ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóÜÏùå"

    echo ""
    echo -e "${CYAN}=== Î≥ºÎ•® ===${NC}"
    docker volume ls | grep crawler || echo "  Î≥ºÎ•® ÏóÜÏùå"

    echo ""
    echo -e "${CYAN}=== Ïù¥ÎØ∏ÏßÄ ===${NC}"
    docker images | grep -E "naver-crawler|REPOSITORY"

    echo ""
    echo -e "${CYAN}=== Ï†ÑÏ≤¥ Ïª®ÌÖåÏù¥ÎÑà ===${NC}"
    docker ps -a | grep -E "naver-crawler|CONTAINER"

    echo ""
    echo -e "${CYAN}=== ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Îüâ ===${NC}"
    docker system df

    echo ""
}

# Î©îÏù∏ Î£®ÌîÑ
while true; do
    show_menu
    read -p "ÏÑ†ÌÉùÌïòÏÑ∏Ïöî: " choice
    echo ""

    case $choice in
        1)
            start_server
            ;;
        2)
            stop_server
            ;;
        3)
            restart_server
            ;;
        4)
            check_status
            ;;
        5)
            view_logs
            ;;
        6)
            view_logs_static
            ;;
        7)
            switch_mode
            ;;
        8)
            switch_environment
            ;;
        9)
            test_production
            ;;
        10)
            build_image
            ;;
        11)
            clean_data
            ;;
        12)
            show_docker_info
            ;;
        13)
            clean_cache
            ;;
        0)
            log_info "ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§."
            exit 0
            ;;
        *)
            log_error "ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§."
            ;;
    esac

    echo ""
    read -p "Í≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî..."
done
