# syntax=docker/dockerfile:1.7
# Production mode Dockerfile (Optimized build)
FROM python:3.11-slim AS base

# 환경변수 설정
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
    NODE_ENV=production

WORKDIR /app

# 기본 패키지 및 대체 폰트 설치
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    wget \
    curl \
    openssl \
    libssl3 \
    fonts-liberation \
    fonts-dejavu-core \
    fonts-unifont \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# PostgreSQL 클라이언트 라이브러리 설치 (psycopg2 의존성)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Python 패키지 설치 (캐시 마운트 사용)
COPY requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -r requirements.txt

# Playwright 브라우저만 설치
RUN playwright install chromium

# Playwright 의존성을 수동으로 설치
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libglib2.0-0 \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxcb1 \
    libxkbcommon0 \
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2 \
    libatspi2.0-0 \
    libexpat1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Node.js 20 설치
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# ============================================
# Dependencies Stage (캐시 최적화)
# ============================================
FROM base AS dependencies

# CI 환경 변수 설정 (prepare 스크립트 건너뛰기)
ENV CI=true

COPY package.json package-lock.json* ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production --legacy-peer-deps && \
    npm cache clean --force

# ============================================
# Builder Stage (Next.js 빌드)
# ============================================
FROM base AS builder

# CI 환경 변수 설정 (prepare 스크립트 건너뛰기)
ENV CI=true

# 의존성 설치 (devDependencies 포함)
COPY package.json package-lock.json* ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci --legacy-peer-deps

# Prisma 파일 복사 및 클라이언트 생성
COPY prisma ./prisma
# package.json의 prisma 버전 사용 (npx 대신)
RUN npm exec prisma generate

# 소스 코드 복사
COPY app ./app
COPY components ./components
COPY hooks ./hooks
COPY public ./public
COPY lib ./lib
COPY scripts ./scripts
COPY instrumentation.ts next.config.js tsconfig.json tailwind.config.js postcss.config.js ./

# Next.js 프로덕션 빌드
RUN npm run build

# ============================================
# Production Stage (최종 이미지)
# ============================================
FROM base AS production

# Python 크롤러 파일 복사
COPY logic ./logic
COPY config.env ./

# 프로덕션 의존성 복사 (dependencies 스테이지에서)
COPY --from=dependencies /app/node_modules ./node_modules

# Builder 스테이지에서 생성된 파일들 복사
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/prisma ./prisma

# Builder에서 생성된 Prisma 클라이언트 복사 (node_modules/@prisma/client에 생성됨)
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma/client ./node_modules/@prisma/client

# Next.js 파일 복사
COPY app ./app
COPY components ./components
COPY hooks ./hooks
COPY lib ./lib
COPY scripts ./scripts
COPY instrumentation.ts next.config.js tsconfig.json tailwind.config.js postcss.config.js ./
COPY package.json package-lock.json* ./

# Prisma 클라이언트는 builder 스테이지에서 이미 생성됨
# node_modules/@prisma/client가 dependencies 스테이지의 node_modules에 포함되어 있음
# 추가 생성 불필요 (prisma CLI가 devDependency이므로 production에서 사용 불가)

# 필요한 디렉토리 생성
RUN mkdir -p crawled_data logs && \
    chmod +x logic/nas_playwright_crawler.py

# 포트 노출
EXPOSE 3000

# 프로덕션 모드로 Next.js 실행
CMD ["npm", "start"]
